Imports System.Configuration
Imports System.Data.Odbc
Imports System.IO
Imports iTextSharp.text
Imports iTextSharp.text.pdf

Public Module MactusReportLib
    Public g_sConString As String = "Data Source=DESKTOP-43PNM9G\SQLEXPRESS;Initial Catalog=Mactus_EMSReports_10; Integrated Security=True;"
    Public g_sEMSDbConString As String = "Data Source=DESKTOP-43PNM9G\SQLEXPRESS;Initial Catalog=Wintac_EMS; Integrated Security=True;"

    Public g_sAppName As String
    Public g_sSiteName As String
    Public g_sVersion As String
    Public g_sInFileDir As String = "D:\BMSEMSReports\INPUT"
    Public g_sOutputFileDir As String = "D:\BMSEMSReports\OUTPUT"
    Public g_sTimeFormatIndian As String = "dd-MM-yyyy HH:mm:ss"
    Public g_sColTimeFormatIndian As String = "dd-MM-yyyy HH:mm"
    Public g_sLSpace As String
    Public g_sPspace As String
    Public g_bError As Boolean
    Public g_sErro As String
    Public g_bIsBMS As Boolean = False
    Public g_bIsGMTTime As Boolean = False
    Public g_bEnableConfiguration As Boolean = False
    Public g_bGenerateTrendChart As Boolean = False
    Public g_bPrintReviewTableEveryPage As Boolean = True
    Public g_bAddLimitsTable As Boolean = True
    Public g_bAddMeanKineticTempRow As Boolean = True

    Public m_oEBOReprots As New EBOReport
    Public m_oIndusoftReports As New NewInduSoftReport

    Public m_oThread As System.Threading.Thread
    Public m_bStopThread As Boolean = False
    Public g_bPrintAlmAckForAllAlarms As Boolean = False

    Public Enum MyFontFamily As Integer
        COURIER = 0
        HELVETICA = 1
        TIMES_ROMAN = 2
    End Enum


    Public g_sErrorText As String
    Public g_bEanbleErrorTextPrint As Boolean = True
    Public g_sGeneratedBy As String = "Generated BY:"
    Public g_sGeneratedTime As String = "Generated Time:"
    Public g_oDoc As Document



    Public g_sHeader1 As String
    Public g_sHeaderAddress As String
    Public g_bHeaderAddress As Boolean = False
    Public g_bHeader1 As Boolean
    Public g_sHeader2 As String
    Public g_bHeader2 As Boolean
    Public g_sHeader3 As String
    Public g_bHeader3 As Boolean
    Public g_nHeaderCount As Integer
    Public g_fH1FontSize As Single = 14.0F
    Public g_fH2FontSize As Single = 13.0F
    Public g_fHFontSize As Single = 12.0F

    Public g_fBodyFontSize As Single = 9.0F
    Public g_fFooterFontSize As Single = 10.0F
    Public g_fBodyHeaderFontSize As Single = 10.0F

    Public Class AlarmInfo
        Public m_sStartTime As String
        Public m_sEndTime As String
        Public m_sDuration As String
        Public m_bHigh As Boolean
        Public m_sType As String
    End Class


    Public Class FooterRow
        Public m_bHeader As Boolean
        Public m_sCol1 As String
        Public m_sCol2 As String
        Public m_sCol3 As String

        Public Sub New(ByRef bHeader As Boolean, ByRef sCol1 As String, ByRef sCol2 As String, ByRef sCol3 As String)
            m_bHeader = bHeader
            m_sCol1 = sCol1
            m_sCol2 = sCol2
            m_sCol3 = sCol3
        End Sub
        Public Sub New(ByRef sCol1 As String)
            m_bHeader = False
            m_sCol1 = sCol1
            m_sCol2 = ""
            m_sCol3 = ""
        End Sub

    End Class


    Public Enum DataAgg As Integer
        Instance = 0
        Average = 1
        AverageMinMax = 2
        AverageMin = 3
        AverageMax = 4
    End Enum

    Public Enum ColType As Integer
        DateTime = 1
        Temperature = 2
        Humidity = 3
        DP = 4
        Other = 5
        Enumtype = 6
    End Enum

    Public Enum ReportType As Integer

        DataReport = 0
        EventReport = 1
        AlarmReport = 2
        DataChartReport = 3
    End Enum

    Public Enum ColJust As Integer
        Center = 0
        Left = 1
        Right = 2
    End Enum

    Public Class ReportColumn
        Public m_nID As Integer
        Public m_nColType As ColType
        Public m_sColType As String
        Public m_sColWidth As Single
        Public m_nColJust As ColJust
        Public m_sColFormat As String
        Public m_sColTitle As String
        Public m_sColumnNameinTable As String
        Public m_bLowCheck As Boolean
        Public m_nLowCheckType As Integer '0=Value, 1=PointID
        Public m_fLow As Single
        Public m_sLowCheckPointName As String

        Public m_bHighCheck As Boolean
        Public m_nHighCheckType As Integer '0=Value, 1=PointID
        Public m_fHigh As Single
        Public m_sHighCheckPointName As String

        Public m_bSPCheck As Boolean
        Public m_nSPCheckType As Integer '0=Value, 1=PointID
        Public m_fSP As Single
        Public m_sSPCheckPointName As String

        Public m_sValue As String
        Public m_bError As Boolean
        Public m_fValue As Single
        Public m_fMin As Single
        Public m_fMax As Single
        Public m_nColMerge As Integer
        Public m_nEnumID As Integer


        Public m_fReportMin As Single
        Public m_fReportMax As Single
        Public m_bReportMinAdded As Boolean
        Public m_bReportMaxAdded As Boolean
        Public m_dKMT As Double
        Public m_nKMTCount As Integer

        Public m_bshowAlarmCol As Boolean

        Public m_nDataChartSeiries As Integer
    End Class


    Public g_oColList As New List(Of ReportColumn)

    Public Function GetDurationString(ByRef oFrom As Date, ByRef oTo As Date) As String
        GetDurationString = "ERROR"
        Dim oSpan As TimeSpan
        Try
            oSpan = oTo.Subtract(oFrom)
            If oSpan.Seconds <= 30 Then
                GetDurationString = (oSpan.Days * 24 + oSpan.Hours).ToString("00") + ":" + oSpan.Minutes.ToString("00") + ":" + oSpan.Minutes.ToString("00")
            Else
                GetDurationString = (oSpan.Days * 24 + oSpan.Hours).ToString("00") + ":" + (oSpan.Minutes + 1).ToString("00") + ":" + oSpan.Minutes.ToString("00")
            End If
        Catch ex As Exception

        End Try
    End Function

    Public Sub LogError(ByRef sError As String)
        Try


            Dim oWriter As System.IO.StreamWriter
            If File.Exists(g_sOutputFileDir + "\ReportErrorLog.txt") Then
                oWriter = New System.IO.StreamWriter(g_sOutputFileDir + "\ReportErrorLog.txt", FileMode.Append)
            Else
                oWriter = New System.IO.StreamWriter(g_sOutputFileDir + "\ReportErrorLog.txt", FileMode.Create)
            End If
            oWriter.WriteLine(sError)
            oWriter.Close()

        Catch ex As Exception

        End Try
    End Sub

    Public Sub LogData(ByRef sData As String, ByVal sFileName As String)
        Try


            Dim oWriter As System.IO.StreamWriter
            If File.Exists(g_sOutputFileDir + "\" + sFileName) Then
                oWriter = New System.IO.StreamWriter(g_sOutputFileDir + "\" + sFileName, FileMode.Append)
            Else
                oWriter = New System.IO.StreamWriter(g_sOutputFileDir + "\" + sFileName, FileMode.Create)
            End If
            oWriter.WriteLine(sData)
            oWriter.Close()

        Catch ex As Exception

        End Try
    End Sub

    Public Function GetCurrentTimeODBCParam(ByRef sName As String) As OdbcParameter
        Dim oTime As DateTime
        oTime = Now
        oTime = oTime.AddMilliseconds(-oTime.Millisecond)
        GetCurrentTimeODBCParam = New OdbcParameter(sName, OdbcType.DateTime)
        GetCurrentTimeODBCParam.Value = oTime
        GetCurrentTimeODBCParam.Precision = 23
        GetCurrentTimeODBCParam.Scale = 0
    End Function

    Public Function GetTimeODBCParam(ByRef sName As String, ByRef oDate As DateTime) As OdbcParameter
        oDate = oDate.AddMilliseconds(-oDate.Millisecond)
        GetTimeODBCParam = New OdbcParameter(sName, OdbcType.DateTime)
        GetTimeODBCParam.Value = oDate
        GetTimeODBCParam.Precision = 23
        GetTimeODBCParam.Scale = 0
    End Function

    Public Function GetPlantConfigParamValue(ByVal sCode As String, ByRef fValue As Single) As Boolean
        Dim sTemp As String = ""
        GetPlantConfigParamValue = False
        If GetPlantConfigParamValue(sCode, sTemp) = False Then
            Exit Function
        End If
        Try
            fValue = Convert.ToSingle(sTemp)
        Catch ex As Exception
            Exit Function
        End Try
        GetPlantConfigParamValue = True
    End Function
    Public Function GetPlantConfigParamValue(ByVal sCode As String, ByRef sValue As String) As Boolean
        GetPlantConfigParamValue = False
        Dim oReader As OdbcDataReader
        Dim sQuery = "Select * FROM TBL_ReportAppConfig WHERE Code='" + sCode + "'"

        Try
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)

                oReader = oCmd.ExecuteReader()
                If oReader.Read() Then
                    Try
                        sValue = oReader("Value")
                    Catch ex As Exception
                        sValue = ""
                    End Try

                    GetPlantConfigParamValue = True
                End If
                oReader.Close()
                oConnection.Close()
            End Using
        Catch ex As Exception

        Finally

        End Try
    End Function

    Public Function ExecuteSQLInDb(ByVal sQuery As String) As Boolean
        ExecuteSQLInDb = False

        Try
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim cmd As New OdbcCommand(sQuery, oConnection)
                cmd.ExecuteNonQuery()
                oConnection.Close()
                ExecuteSQLInDb = True
            End Using
        Catch ex As Exception
            LogError("ExecuteSQLinCRACDb Exceltion=" + ex.Message + " " + sQuery)
        Finally

        End Try

    End Function

    Public Function GetEventReportID() As Integer
        GetEventReportID = -1
        Dim sQuery As String
        Try
            sQuery = "Select ReportID FROM TBL_ReportsConfiguration WHERE ReportType=" + Str(ReportType.EventReport)
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)
                GetEventReportID = oCmd.ExecuteScalar()
                oConnection.Close()
            End Using
        Catch ex As Exception

        Finally

        End Try
    End Function



    Public Function ReadDatabaseConnection(ByRef sError As String) As Boolean
        ReadDatabaseConnection = False
        Dim sTemp As String = ""
        Try
            sTemp = ConfigurationManager.ConnectionStrings("DBConStr").ToString
            g_sConString = sTemp

            Try
                sTemp = ConfigurationManager.ConnectionStrings("IsBMS").ToString
                g_bIsBMS = CBool(sTemp)
            Catch ex As Exception
                g_bIsBMS = False
            End Try

            Try
                sTemp = ConfigurationManager.ConnectionStrings("IsGMTTime").ToString
                g_bIsGMTTime = CBool(sTemp)
            Catch ex As Exception
                g_bIsGMTTime = False
            End Try

            Try
                sTemp = ConfigurationManager.ConnectionStrings("EnableConfiguration").ToString
                g_bEnableConfiguration = CBool(sTemp)
            Catch ex As Exception
                g_bEnableConfiguration = False
            End Try


            Try
                sTemp = ConfigurationManager.ConnectionStrings("EnableConfiguration").ToString
                g_bGenerateTrendChart = CBool(sTemp)
            Catch ex As Exception
                g_bGenerateTrendChart = False
            End Try
        Catch ex As Exception

        End Try

        Try
            Dim oConnection As New OdbcConnection(g_sConString)
            oConnection.Open()
            oConnection.Close()
        Catch ex As Exception
            sError = g_sConString + "  " + ex.Message
            Exit Function
        End Try
        If GetPlantConfigParamValue("EMSDBODBCLocation", g_sEMSDbConString) = False Then
            MsgBox("ReadConfiguration Parameter EMDDBConString Not There")
            Exit Function
        End If

        Try
            Dim oConnection As New OdbcConnection(g_sEMSDbConString)
            oConnection.Open()
            oConnection.Close()
        Catch ex As Exception
            sError = g_sEMSDbConString + "  " + ex.Message
            Exit Function
        End Try

        If GetPlantConfigParamValue("PlantName", g_sSiteName) = False Then
            MsgBox("ReadConfiguration Parameter PlantName Not There")
            Exit Function
        End If

        If GetPlantConfigParamValue("AppName", g_sAppName) = False Then
            MsgBox("ReadConfiguration Parameter AppName Not There")
            Exit Function
        End If
        If GetPlantConfigParamValue("AppVersion", g_sVersion) = False Then
            MsgBox("ReadConfiguration Parameter AppVersion Not There")
            Exit Function
        End If
        If GetPlantConfigParamValue("ReportMainHeaderName", g_sHeader1) = False Then
            MsgBox("ReadConfiguration Parameter ReportMainHeaderName Not There")
            Exit Function
        End If
        g_sHeaderAddress = ""
        If GetPlantConfigParamValue("ReportHeaderAddress", g_sHeaderAddress) = False Then
            MsgBox("ReadConfiguration Parameter ReportHeaderAddress Not There. This header row will not be printed")
        End If
        g_sHeaderAddress.Trim()
        If g_sHeaderAddress.Length > 0 Then
            g_bHeaderAddress = True
        End If
        If GetPlantConfigParamValue("InFileDir", g_sInFileDir) = False Then
            MsgBox("ReadConfiguration Parameter OutFileDir Not There")
            Exit Function
        End If
        If GetPlantConfigParamValue("OutFileDir", g_sOutputFileDir) = False Then
            MsgBox("ReadConfiguration Parameter OutFileDir Not There")
            Exit Function
        End If

        If GetPlantConfigParamValue("DateTimeForatString", g_sTimeFormatIndian) = False Then
            MsgBox("ReadConfiguration Parameter DateTimeForatString Not There")
            Exit Function
        End If
        If GetPlantConfigParamValue("DateTimeColForatString", g_sColTimeFormatIndian) = False Then
            g_sColTimeFormatIndian = g_sTimeFormatIndian
        End If

        If GetPlantConfigParamValue("DataMissingText", g_sErrorText) = False Then
            MsgBox("ReadConfiguration Parameter DataMissingText Not There")
            Exit Function
        End If
        If GetPlantConfigParamValue("GeneratedBy", g_sGeneratedBy) = False Then
            MsgBox("ReadConfiguration Parameter GeneratedBy Not There")
            Exit Function
        End If
        If GetPlantConfigParamValue("GeneratedTime", g_sGeneratedTime) = False Then
            MsgBox("ReadConfiguration Parameter GeneratedTime Not There")
            Exit Function
        End If

        If GetPlantConfigParamValue("PSpace", g_sPspace) = False Then
            MsgBox("ReadConfiguration Parameter PSpace Not There")
            Exit Function
        End If

        If GetPlantConfigParamValue("LSpace", g_sLSpace) = False Then
            MsgBox("ReadConfiguration Parameter LSpace Not There")
            Exit Function
        End If
        If GetPlantConfigParamValue("PrintDataMissingError", sTemp) = False Then
            MsgBox("ReadConfiguration Parameter PrintDataMissingError Not There")
            Exit Function
        End If
        Try
            g_bEanbleErrorTextPrint = CBool(sTemp)
        Catch ex As Exception
            g_bEanbleErrorTextPrint = True
            sError = ex.Message
        End Try

        sTemp = ""
        If GetPlantConfigParamValue("PrintReviewTableEveryPage", sTemp) = False Then
            MsgBox("ReadConfiguration Parameter PrintReviewTableEveryPage Not There. TRUE value is assumed")
        End If

        Try
            g_bPrintReviewTableEveryPage = CBool(sTemp)
        Catch ex As Exception
            g_bPrintReviewTableEveryPage = True
            sError = ex.Message
        End Try

        g_bAddLimitsTable = False
        If GetPlantConfigParamValue("AddLimitsTable", sTemp) = True Then
            Try
                g_bAddLimitsTable = CBool(sTemp)
            Catch ex As Exception
                g_bAddLimitsTable = False
                sError = ex.Message
            End Try

        End If




        g_bAddMeanKineticTempRow = False
        If GetPlantConfigParamValue("AddMeanKineticTempRow", sTemp) = True Then
            Try
                g_bAddMeanKineticTempRow = CBool(sTemp)
            Catch ex As Exception
                g_bAddMeanKineticTempRow = False
                sError = ex.Message
            End Try

        End If

        sTemp = ""
        If GetPlantConfigParamValue("PrintAlmAckForAllAlarms", sTemp) = False Then
            MsgBox("ReadConfiguration Parameter PrintAlmAckForAllAlarms Not There. FALSE value is assumed")
        End If

        Try
            g_bPrintAlmAckForAllAlarms = CBool(sTemp)
        Catch ex As Exception
            g_bPrintAlmAckForAllAlarms = False
            sError = ex.Message
        End Try



        ReadDatabaseConnection = True

    End Function



    Public Function fileNameDateStamp()

        fileNameDateStamp = Now.Day.ToString + "_" + Now.Month.ToString() + "_" + Now.Year.ToString + "_" + Now.Hour.ToString + "_" + Now.Minute.ToString + "_" + Now.Second.ToString + "_"

    End Function

    Public Function GetReportOutputPathName(ByRef nReportId As Integer, ByRef sReportName As String, ByRef sFileName As String, ByRef sPathFileName As String) As Boolean
        GetReportOutputPathName = False

        Dim sQuery As String
        Dim oReader As OdbcDataReader
        sQuery = "SELECT * FROM tbl_reportsconfiguration WHERE reportid=" + nReportId.ToString()
        Try
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)
                oReader = oCmd.ExecuteReader()
                If oReader.Read() Then
                    sReportName = oReader("ReportTitle")
                    sFileName = sReportName
                    sFileName = sFileName.Replace(" ", "_")
                    sFileName = sFileName.Replace(":", "_")

                    sFileName = fileNameDateStamp() + sFileName + ".pdf"
                    sPathFileName = g_sOutputFileDir + "\" + sFileName
                    GetReportOutputPathName = True
                End If
                oReader.Close()

                oConnection.Close()

            End Using
        Catch ex As Exception

        End Try

    End Function

    Public Function InsertNewReportStatusRecord(ByVal nReportID As Integer, ByRef dtFrom As Date, ByRef dtTo As Date, ByRef nTimeInterval As Integer, ByRef sGeneratedUserName As String, Optional ByVal nChart As Integer = 0) As Long
        InsertNewReportStatusRecord = 0
        Dim sQuery As String
        Dim sFileName As String = ""
        Dim sPathFileName As String = ""
        Dim sReportName As String = ""

        If GetReportOutputPathName(nReportID, sReportName, sFileName, sPathFileName) = False Then
            Exit Function
        End If

        sQuery = "INSERT INTO tbl_reportstatus (reportid, fromdate, todate, intervalmin, username, outputfilename, status, progress,filename,reporttitle,generatechart) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?) "
        Try
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)
                oCmd.Parameters.Add("@0", OdbcType.Int).Value = nReportID
                If g_bIsGMTTime Then
                    oCmd.Parameters.Add(GetTimeODBCParam("@1", dtFrom.ToUniversalTime))
                    oCmd.Parameters.Add(GetTimeODBCParam("@2", dtTo.ToUniversalTime))
                Else
                    oCmd.Parameters.Add(GetTimeODBCParam("@1", dtFrom))
                    oCmd.Parameters.Add(GetTimeODBCParam("@2", dtTo))
                End If
                oCmd.Parameters.Add("@3", OdbcType.Int).Value = nTimeInterval
                oCmd.Parameters.Add("@4", OdbcType.VarChar).Value = sGeneratedUserName
                oCmd.Parameters.Add("@5", OdbcType.VarChar).Value = sPathFileName
                oCmd.Parameters.Add("@6", OdbcType.Int).Value = 0
                oCmd.Parameters.Add("@7", OdbcType.Int).Value = 0
                oCmd.Parameters.Add("@8", OdbcType.VarChar).Value = sFileName
                oCmd.Parameters.Add("@9", OdbcType.VarChar).Value = sReportName
                oCmd.Parameters.Add("@9", OdbcType.Int).Value = nChart

                oCmd.ExecuteNonQuery()

                sQuery = "SELECT @@Identity "
                oCmd.Parameters.Clear()
                oCmd.CommandText = sQuery
                InsertNewReportStatusRecord = oCmd.ExecuteScalar

                oConnection.Close()
            End Using
        Catch ex As Exception

        End Try
    End Function

    Public Sub UpdateReportProgress(ByRef nReportStatusID As Long, ByRef dtfrom As Date, ByRef dtto As Date, ByRef odate As Date)
        Try
            Dim nProgress As Integer
            Dim nProgressSec As Integer
            Dim nTotalSec As Integer

            nProgressSec = odate.Subtract(dtfrom).TotalSeconds
            nTotalSec = dtto.Subtract(dtfrom).TotalSeconds
            nProgress = nProgressSec * 100 / nTotalSec
            Dim sQuery As String
            If nProgress = 100 Then
                sQuery = "UPDATE tbl_reportstatus SET progress = ?, status=3 WHERE id=? "
            Else
                sQuery = "UPDATE tbl_reportstatus SET progress = ?, status=2 WHERE id=? "
            End If

            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)
                oCmd.Parameters.Add("@0", OdbcType.Int).Value = nProgress
                oCmd.Parameters.Add("@1", OdbcType.BigInt).Value = nReportStatusID
                oCmd.ExecuteNonQuery()
                oConnection.Close()
            End Using

        Catch ex As Exception

        End Try
    End Sub

    Public Function GetReportProgress(ByRef nReportStatusID As Long) As Integer
        GetReportProgress = 0

        Dim sQuery As String

        sQuery = "SELECT progress FROM tbl_reportstatus WHERE id=" + nReportStatusID.ToString()

        Try
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)

                GetReportProgress = oCmd.ExecuteScalar()
                oConnection.Close()
            End Using
        Catch ex As Exception

        End Try

        If GetReportProgress > 100 Then
            GetReportProgress = 100
        End If
    End Function
    Public Function GetReportName(ByRef nReportStatusID As Long) As String
        GetReportName = ""


        Dim sQuery As String

        sQuery = "SELECT reporttitle FROM tbl_reportstatus WHERE id=" + nReportStatusID.ToString()

        Try
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)

                GetReportName = oCmd.ExecuteScalar()
                oConnection.Close()
            End Using
        Catch ex As Exception

        End Try


    End Function

    Public Sub StartThread()
        Try
            m_bStopThread = False
            m_oThread = New System.Threading.Thread(AddressOf GenerateReport)
            m_oThread.Priority = System.Threading.ThreadPriority.BelowNormal
            m_oThread.Start()
        Catch ex As Exception

        End Try
    End Sub

    Public Sub GenerateReport()
        Dim sQuery As String
        Dim oReader As OdbcDataReader
        Dim nReportStatusID As Long
        Dim nReportID As Integer
        Dim dtFrom As Date
        Dim dtTo As Date
        Dim nInternal As Integer
        Dim sUserName As String
        Dim sPathFileName As String

        sQuery = "SELECT * FROM tbl_reportstatus WHERE status=0 and progress=0"

        Try
            While m_bStopThread = False
                Using oConnection As New OdbcConnection(g_sConString)
                    oConnection.Open()
                    Dim oCmd As New OdbcCommand(sQuery, oConnection)
                    oReader = oCmd.ExecuteReader()
                    If oReader.Read() Then
                        nReportStatusID = oReader("id")
                        nReportID = oReader("reportid")
                        dtFrom = oReader("fromdate")
                        dtTo = oReader("todate")
                        nInternal = oReader("intervalmin")
                        sUserName = oReader("username")
                        sPathFileName = oReader("outputfilename")
                        Dim bGenerateTrendChart As Boolean = False
                        Try
                            bGenerateTrendChart = oReader("generatechart")
                        Catch ex As Exception
                            bGenerateTrendChart = False

                        End Try

                        UpdateReportProgress(nReportStatusID, dtFrom, dtTo, dtFrom)

                        Try
                            If g_bIsBMS Then
                                m_oEBOReprots.ReadReportConfiguration(nReportID)
                                If m_oEBOReprots.g_nReportType = ReportType.DataReport Then
                                    If bGenerateTrendChart Then
                                        m_oEBOReprots.GenerateTrendChartReport(nReportStatusID, dtFrom, dtTo, sPathFileName, 1)
                                    Else
                                        m_oEBOReprots.GenerateTrendReport(nReportStatusID, dtFrom, dtTo, sPathFileName, nInternal)
                                    End If
                                ElseIf m_oEBOReprots.g_nReportType = ReportType.DataChartReport Then
                                    m_oEBOReprots.GenerateTrendChartReport(nReportStatusID, dtFrom, dtTo, sPathFileName, 1)
                                ElseIf m_oEBOReprots.g_nReportType = ReportType.AlarmReport Then
                                    m_oEBOReprots.GenerateAlarmReport(nReportStatusID, dtFrom, dtTo, sPathFileName)
                                ElseIf m_oEBOReprots.g_nReportType = ReportType.EventReport Then
                                    m_oEBOReprots.GenerateEventReport(nReportStatusID, dtFrom, dtTo, sPathFileName)
                                End If
                            Else
                                m_oIndusoftReports.ReadReportConfiguration(nReportID)
                                If m_oIndusoftReports.g_nReportType = ReportType.DataReport Then
                                    m_oIndusoftReports.GenerateTrendReport(nReportStatusID, dtFrom, dtTo, sPathFileName, nInternal)
                                ElseIf m_oEBOReprots.g_nReportType = ReportType.DataChartReport Then
                                    m_oEBOReprots.GenerateTrendChartReport(nReportStatusID, dtFrom, dtTo, sPathFileName, 1)
                                ElseIf m_oIndusoftReports.g_nReportType = ReportType.AlarmReport Then
                                    m_oIndusoftReports.GenerateAlarmReport(nReportStatusID, dtFrom, dtTo, sPathFileName)
                                ElseIf m_oIndusoftReports.g_nReportType = ReportType.EventReport Then
                                    m_oIndusoftReports.GenerateEventReport(nReportStatusID, dtFrom, dtTo, sPathFileName)
                                End If
                            End If
                        Catch ex As Exception

                        End Try

                    End If
                    oReader.Close()
                    oConnection.Close()
                End Using
                Threading.Thread.Sleep(100)
            End While
        Catch ex As Exception
            LogError(ex.Message)
        End Try
    End Sub

    Public Sub UpdateExceptionInDatabase(ByRef nReportStatusID As Long, ByRef sMessage As String)
        Dim sQuery As String

        sQuery = "UPDATE tbl_reportstatus SET errormessage='" + sMessage + "' WHERE id=" + nReportStatusID.ToString()

        Try
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)
                oCmd.ExecuteNonQuery()
                oConnection.Close()
            End Using
        Catch ex As Exception

        End Try
    End Sub

    Public Function FormatTimeToString(ByRef oAlmTime As Date, ByRef sForamtString As String) As String
        FormatTimeToString = "Exception"
        Try
            Dim oTime As Date
            If g_bIsGMTTime Then
                oTime = oAlmTime.ToLocalTime()
            Else
                oTime = oAlmTime
            End If
            FormatTimeToString = oTime.ToString(sForamtString)
        Catch ex As Exception

        End Try

    End Function

    Public Function GetReportFileName(ByRef nRepotStatusID As Long) As String
        GetReportFileName = ""
        Dim sQuery As String

        sQuery = "SELECT filename FROM tbl_reportstatus WHERE id=" + nRepotStatusID.ToString()

        Try
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)

                GetReportFileName = oCmd.ExecuteScalar()
                oConnection.Close()
            End Using
        Catch ex As Exception

        End Try
    End Function

    Public Function GetDataReportChart(ByRef nReportID As Long) As Boolean
        GetDataReportChart = False
        Dim sQuery As String

        sQuery = "SELECT generatechart FROM tbl_reportsconfiguration WHERE reportid=" + nReportID.ToString()

        Try
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)

                GetDataReportChart = CBool(oCmd.ExecuteScalar())
                oConnection.Close()
            End Using
        Catch ex As Exception
            MsgBox(ex.Message + " " + sQuery)
        End Try
    End Function

    Public Function GetNewColumnID() As Integer
        Dim sQuery As String
        Dim oReader As OdbcDataReader
        GetNewColumnID = 1

        sQuery = "SELECT * FROM tbl_reportcolumns order by columnid desc"
        Using oConnection As New OdbcConnection(g_sConString)
            oConnection.Open()
            Dim oCmd As New OdbcCommand(sQuery, oConnection)
            oReader = oCmd.ExecuteReader()
            If oReader.Read() Then
                GetNewColumnID = oReader("columnid")
                GetNewColumnID += 1
            End If
            oConnection.Close()
        End Using


    End Function

    Public Sub AddDateTimeColumnToReport(ByVal nReportID As Integer)
        Dim sQuery As String
        Dim nColID As Integer
        Dim sTimeCol As String
        If g_bIsBMS Then
            sTimeCol = "timestamp"
        Else
            sTimeCol = "Time_Stamp"
        End If
        nColID = GetNewColumnID()
        sQuery = "INSERT INTO tbl_reportcolumns(columnid,reportid, colnameindb, colseq, coltype, colwidth, colformat, coljust, colheader, lowcheck, lowcheckvalue, highcheck, highcheckvalue, coltitle, enumid)"
        sQuery += "VALUES ( " + nColID.ToString() + "," + nReportID.ToString() + ", '" + sTimeCol + "', 1, 1, 1, '" + g_sColTimeFormatIndian + "', 0, 'Date Time', 0, 0, 0, 0, 'Date Time', 0) "
        ExecuteSQLInDb(sQuery)
    End Sub

    Public Function GetTemplateName(ByRef nTemID As Integer) As String

        Dim sQuery As String = "SELECT templatename FROM tbl_reporttemplates WHERE templateid=" + nTemID.ToString

        Try
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)
                GetTemplateName = oCmd.ExecuteScalar()
                oConnection.Close()
            End Using
        Catch ex As Exception
            GetTemplateName = "ProtraitWiderMargin"
        End Try
    End Function
    Public Function GetTemplateID(ByRef sTempName As String) As Integer
        Dim sQuery As String = "SELECT templateid  FROM tbl_reporttemplates WHERE templatename='" + sTempName + "'"

        Try
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)
                GetTemplateID = oCmd.ExecuteScalar()
                oConnection.Close()
            End Using
        Catch ex As Exception
            GetTemplateID = 1
        End Try
    End Function

    Public Function GetGroupName(ByVal nGroupID As Integer, Optional ByVal nReportType As ReportType = ReportType.DataReport) As String

        If g_bIsBMS = False And nReportType = ReportType.AlarmReport Then
            GetGroupName = nGroupID.ToString()
            Exit Function
        End If


        If nReportType = ReportType.AlarmReport Then
            If nGroupID = 0 Then
                GetGroupName = "All Alarms"
                Exit Function
            End If
        End If

        Dim sQuery As String = "SELECT groupname FROM tbl_datagroups WHERE groupid=" + nGroupID.ToString
        Try
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)
                GetGroupName = oCmd.ExecuteScalar()
                oConnection.Close()
            End Using
        Catch ex As Exception
            GetGroupName = ""
        End Try
    End Function

    Public Function GetGroupID(ByRef sGroupName As String, Optional ByVal nReportType As ReportType = ReportType.DataReport) As Integer

        If g_bIsBMS = False And nReportType = ReportType.AlarmReport Then
            GetGroupID = CInt(sGroupName)
            Exit Function
        End If


        If nReportType = ReportType.AlarmReport Then
            If sGroupName = "All Alarms" Then
                GetGroupID = 0
                Exit Function
            End If
        End If

        Dim sQuery As String = "SELECT groupid FROM tbl_datagroups WHERE groupname='" + sGroupName + "'"

        Try
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)
                GetGroupID = oCmd.ExecuteScalar()
                oConnection.Close()
            End Using
        Catch ex As Exception
            GetGroupID = 0
        End Try
    End Function


    Public Sub AddNewDataTrendGroup(ByRef sGroupName As String)
        Dim sQuery As String = "SELECT groupid FROM tbl_datagroups ORDER BY groupid DESC"
        Dim nGroupID As Integer
        Try
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)
                nGroupID = oCmd.ExecuteScalar()
                oConnection.Close()
            End Using
        Catch ex As Exception
            nGroupID = 0
        End Try
        nGroupID = nGroupID + 1

        sQuery = "INSERT INTO tbl_datagroups(groupid, groupname, grouptype)VALUES(" + nGroupID.ToString + ",'" + sGroupName + "',0)"
        ExecuteSQLInDb(sQuery)
    End Sub

    Public Sub SynchronizeAlarmGroupName()
        Dim sQuery As String = "SELECT DISTINCT category FROM event_data order by category"
        Dim oReader As OdbcDataReader

        Try
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)
                oReader = oCmd.ExecuteReader()
                While oReader.Read()
                    CheckAndAddNewAlarmGroup(oReader("category"))
                End While
                oConnection.Close()
            End Using
        Catch ex As Exception

        End Try
    End Sub

    Public Sub CheckAndAddNewAlarmGroup(ByRef sGroupName As String)

        Dim sQuery As String = "SELECT COUNT(*) FROM tbl_datagroups WHERE groupname='" + sGroupName = "'"
        Dim nCount As Integer
        Try
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)
                nCount = oCmd.ExecuteScalar()
                oConnection.Close()
            End Using
        Catch ex As Exception

        End Try

        If nCount <> 0 Then
            Exit Sub
        End If

        sQuery = "SELECT groupid FROM tbl_datagroups ORDER BY groupid DESC"
        Dim nGroupID As Integer
        Try
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)
                nGroupID = oCmd.ExecuteScalar()
                oConnection.Close()
            End Using
        Catch ex As Exception
            nGroupID = 0
        End Try
        nGroupID = nGroupID + 1

        sQuery = "INSERT INTO tbl_datagroups(groupid, groupname, grouptype)VALUES(" + nGroupID.ToString + ",'" + sGroupName + "',-1)"
        ExecuteSQLInDb(sQuery)
    End Sub

    Public Function GetEnumStringFromValue(ByRef nEnumID As Integer, ByRef nEnumValue As Integer) As String
        GetEnumStringFromValue = nEnumValue.ToString()

        Dim sQuery As String

        sQuery = "SELECT enumdesc FROM tbl_enumvalue WHERE enumid=" + nEnumID.ToString + " and enumvalue=" + nEnumValue.ToString()
        Try
            Using oConnenction As New OdbcConnection(g_sConString)
                oConnenction.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnenction)
                GetEnumStringFromValue = oCmd.ExecuteScalar()
                oConnenction.Close()
            End Using
        Catch ex As Exception
            LogError(ex.Message + "  " + sQuery)
            GetEnumStringFromValue = nEnumValue.ToString()
        End Try

        If GetEnumStringFromValue = "" Then
            GetEnumStringFromValue = nEnumValue.ToString()
        End If


    End Function

    Public Function GetPointName(ByRef nID As Integer) As String
        GetPointName = ""
        Dim sQuery As String = "SELECT pointname from tbl_pointidname where id=" + nID.ToString()
        Try
            Using oConnection As New OdbcConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)
                GetPointName = oCmd.ExecuteScalar()
                oConnection.Close()
            End Using
        Catch ex As Exception

        End Try


    End Function

    Public Sub SynchronizeIndusoftPointIDNamesTable()
        Dim oReader As OdbcDataReader
        Dim sQuery As String
        Dim nLogID As Integer
        Dim sPointName As String

        sQuery = "TRUNCATE TABLE tbl_pointidname"
        ExecuteSQLInDb(sQuery)
        Try

            sQuery = "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'TREND001' AND ORDINAL_POSITION >2 AND COLUMN_NAME NOT LIKE '%HiHi%' AND COLUMN_NAME NOT LIKE '%LoLo%' "
            Using oConnection As New OdbcConnection(g_sEMSDbConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)
                oReader = oCmd.ExecuteReader()
                While oReader.Read()
                    nLogID = oReader("ORDINAL_POSITION")
                    sPointName = oReader("COLUMN_NAME")
                    sQuery = "INSERT INTO tbl_pointidname (id,pointname) VALUES (" + nLogID.ToString() + ",'" + sPointName + "')"
                    ExecuteSQLInDb(sQuery)

                End While
                oConnection.Close()
            End Using
        Catch ex As Exception

        End Try

    End Sub


    Public Sub SynchronizeEBOPointIDNamesTable()
        Dim oReader As OdbcDataReader
        Dim sQuery As String = ""
        Dim nLogID As Integer
        Dim sPointName As String
        Dim sTemp As String
        Dim nIndex As Integer


        sQuery = "TRUNCATE TABLE tbl_pointidname"
        ExecuteSQLInDb(sQuery)

        Try

            sQuery = "SELECT * FROM trend_meta ORDER BY externallogid"


            Using oConnection As New OdbcConnection(g_sEMSDbConString)
                oConnection.Open()
                Dim oCmd As New OdbcCommand(sQuery, oConnection)
                oReader = oCmd.ExecuteReader()
                While oReader.Read()
                    nLogID = oReader("externallogid")
                    sTemp = oReader("source")
                    'MsgBox(sTemp)
                    nIndex = InStrRev(sTemp, "/")
                    sTemp = Strings.Right(sTemp, Len(sTemp) - nIndex)
                    'MsgBox(sTemp)
                    nIndex = InStr(sTemp, " ")
                    If nIndex > 0 Then
                        sPointName = Strings.Left(sTemp, nIndex)
                    Else
                        sPointName = sTemp
                    End If
                    ' MsgBox(sPointName)
                    sQuery = "INSERT INTO tbl_pointidname (id,pointname) VALUES (" + nLogID.ToString() + ",'" + sPointName + "')"
                    ExecuteSQLInDb(sQuery)

                End While
                oConnection.Close()
            End Using
        Catch ex As Exception
            MsgBox(ex.Message + "  " + sQuery)
        End Try

    End Sub


End Module

