Imports System.Configuration
Imports System.Data.Odbc
Imports iTextSharp.text
Imports iTextSharp.text.pdf

Module GlobalFunctions
    Public g_sConString As String = "Data Source=DESKTOP-43PNM9G\SQLEXPRESS;Initial Catalog=Mactus_EMSReports_10; Integrated Security=True;"
    Public g_sEMSDbConString As String = "Data Source=DESKTOP-43PNM9G\SQLEXPRESS;Initial Catalog=Wintac_EMS; Integrated Security=True;"

    Public g_sAppName As String
    Public g_sSiteName As String
    Public g_sVersion As String
    Public g_sInFileDir As String = "D:\BMSEMSReports\INPUT"
    Public g_sOutputFileDir As String = "D:\BMSEMSReports\OUTPUT"
    Public g_sTimeFormatIndian As String = "dd-MM-yyyy HH:mm:ss"

    Public g_fH1FontSize As Single = 14.0F
    Public g_fH2FontSize As Single = 13.0F
    Public g_fHFontSize As Single = 12.0F

    Public g_fBodyFontSize As Single = 9.0F
    Public g_fFooterFontSize As Single = 10.0F
    Public g_fBodyHeaderFontSize As Single = 10.0F

    Public g_oReportFontName As Font.FontFamily = iTextSharp.text.Font.FontFamily.TIMES_ROMAN
    Public g_sReportFontName As String

    Public g_sErrorText As String
    Public g_sGeneratedBy As String = "Generated BY:"
    Public g_sGeneratedTime As String = "Generated Time:"
    Public g_oDoc As Document

    Public g_nReportID As Integer
    Public g_nReportType As ReportType
    Public g_nAlmGroupID As Integer

    Public g_sHeader1 As String
    Public g_bHeader1 As Boolean
    Public g_sHeader2 As String
    Public g_bHeader2 As Boolean
    Public g_sHeader3 As String
    Public g_bHeader3 As Boolean
    Public g_nHeaderCount As Integer

    Public Class FooterRow
        Public m_bHeader As Boolean
        Public m_sCol1 As String
        Public m_sCol2 As String
        Public m_sCol3 As String

        Public Sub New(ByRef bHeader As Boolean, ByRef sCol1 As String, ByRef sCol2 As String, ByRef sCol3 As String)
            m_bHeader = bHeader
            m_sCol1 = sCol1
            m_sCol2 = sCol2
            m_sCol3 = sCol3
        End Sub
        Public Sub New(ByRef sCol1 As String)
            m_bHeader = False
            m_sCol1 = sCol1
            m_sCol2 = ""
            m_sCol3 = ""
        End Sub

    End Class
    Public g_oFooterRowList As New List(Of FooterRow)

    Public g_fSideMargin As Single = 40
    Public g_fTopBottomMargin As Single = 30
    Public g_fSideFactor As Single = 79.9

    Public g_nHeaderPad = 6
    Public g_nFooterPad = 3
    Public g_nBodyPad = 1
    Public g_nBodyHeaderPad = 2

    Public g_nTimeIntervalMin As Integer
    Public g_nDataAgg As DataAgg
    Public g_bLandScape As Boolean

    Public g_bIconNeeded As Boolean
    Public g_bGeneratedTime As Boolean

    Public g_bGeneratedBy As Boolean
    Public g_bFRomToDatesPrinted As Boolean
    Public g_sDataTableName As String
    Public g_sGeneratedUserName As String
    Public g_sLSpace As String
    Public g_sPspace As String

    Public g_oH1Font As iTextSharp.text.Font
    Public g_oH2Font As iTextSharp.text.Font
    Public g_oHFont As iTextSharp.text.Font

    'Body Font
    Public g_oBodyFont As iTextSharp.text.Font
    Public g_oBodyFontLow As iTextSharp.text.Font
    Public g_oBodyFontHigh As iTextSharp.text.Font
    Public g_oBodyHeaderFont As iTextSharp.text.Font

    'Footer Font
    Public g_oFooterFont As iTextSharp.text.Font

    Public Enum DataAgg As Integer
        Instance = 0
        Average = 1
        AverageMinMax = 2
        AverageMin = 3
        AverageMax = 4
    End Enum

    Public Enum ColType As Integer
        DateTime = 1
        Temperature = 2
        Humidity = 3
        DP = 4
        Other = 5
    End Enum

    Public Enum ReportType As Integer
        DataReport = 0
        EventReport = 1
        AlarmReport = 2
    End Enum

    Public Enum ColJust As Integer
        Center = 0
        Left = 1
        Right = 2
    End Enum

    Public Class ReportColumn
        Public m_nID As Integer
        Public m_nColType As ColType
        Public m_sColType As String
        Public m_sColWidth As Single
        Public m_nColJust As ColJust
        Public m_sColFormat As String
        Public m_sColTitle As String
        Public m_sColumnNameinTable As String
        Public m_bLowCheck As Boolean
        Public m_fLow As Single
        Public m_bHighCheck As Boolean
        Public m_fHigh As Single
        Public m_sValue As String
        Public m_bError As Boolean
        Public m_fValue As Single
        Public m_fMin As Single
        Public m_fMax As Single
    End Class


    Public g_oColList As New List(Of ReportColumn)

    Public Function GetCurrentTimeODBCParam(ByRef sName As String) As OdbcParameter
        Dim oTime As DateTime
        oTime = Now
        oTime = oTime.AddMilliseconds(-oTime.Millisecond)
        GetCurrentTimeODBCParam = New OdbcParameter(sName, OdbcType.DateTime)
        GetCurrentTimeODBCParam.Value = oTime
        GetCurrentTimeODBCParam.Precision = 23
        GetCurrentTimeODBCParam.Scale = 0
    End Function

    Public Function GetTimeODBCParam(ByRef sName As String, ByRef oDate As DateTime) As OdbcParameter
        oDate = oDate.AddMilliseconds(-oDate.Millisecond)
        GetTimeODBCParam = New OdbcParameter(sName, OdbcType.DateTime)
        GetTimeODBCParam.Value = oDate
        GetTimeODBCParam.Precision = 23
        GetTimeODBCParam.Scale = 0
    End Function

    Public Function GetPlantConfigParamValue(ByVal sCode As String, ByRef fValue As Single) As Boolean
        Dim sTemp As String = ""
        GetPlantConfigParamValue = False
        If GetPlantConfigParamValue(sCode, sTemp) = False Then
            Exit Function
        End If
        Try
            fValue = Convert.ToSingle(sTemp)
        Catch ex As Exception
            Exit Function
        End Try
        GetPlantConfigParamValue = True
    End Function
    Public Function GetPlantConfigParamValue(ByVal sCode As String, ByRef sValue As String) As Boolean
        GetPlantConfigParamValue = False
        Dim oReader As ODBCDataReader
        Dim sQuery = "Select * FROM TBL_ReportAppConfig WHERE Code='" + sCode + "'"

        Try
            Using oConnection As New ODBCConnection(g_sConString)
                oConnection.Open()
                Dim oCmd As New odbcCommand(sQuery, oConnection)

                oReader = oCmd.ExecuteReader()
                If oReader.Read() Then
                    sValue = oReader("Value")
                    GetPlantConfigParamValue = True
                End If
                oReader.Close()
                oConnection.Close()
            End Using
        Catch ex As Exception

        Finally

        End Try
    End Function

    Public Function ReadDatabaseConnection() As Boolean
        ReadDatabaseConnection = False
        Dim sTemp As String = ""
        Try
            sTemp = ConfigurationManager.ConnectionStrings("DBConStr").ToString
            g_sConString = sTemp
        Catch ex As Exception

        End Try

        Try
            Dim oConnection As New ODBCConnection(g_sConString)
            oConnection.Open()
            oConnection.Close()
        Catch ex As Exception
            MsgBox(ex.Message)
            Exit Function
        End Try
        If GetPlantConfigParamValue("EMSDBODBCLocation", g_sEMSDbConString) = False Then
            MsgBox("ReadConfiguration Parameter EMDDBConString Not There")
            Exit Function
        End If

        Try
            Dim oConnection As New ODBCConnection(g_sEMSDbConString)
            oConnection.Open()
            oConnection.Close()
        Catch ex As Exception
            MsgBox(ex.Message)
            Exit Function
        End Try

        If GetPlantConfigParamValue("PlantName", g_sSiteName) = False Then
            MsgBox("ReadConfiguration Parameter InFileDir Not There")
            Exit Function
        End If

        If GetPlantConfigParamValue("AppName", g_sAppName) = False Then
            MsgBox("ReadConfiguration Parameter InFileDir Not There")
            Exit Function
        End If
        If GetPlantConfigParamValue("AppVersion", g_sVersion) = False Then
            MsgBox("ReadConfiguration Parameter InFileDir Not There")
            Exit Function
        End If
        If GetPlantConfigParamValue("ReportMainHeaderName", g_sHeader1) = False Then
            MsgBox("ReadConfiguration Parameter ReportMainHeaderName Not There")
            Exit Function
        End If
        If GetPlantConfigParamValue("InFileDir", g_sInFileDir) = False Then
            MsgBox("ReadConfiguration Parameter OutFileDir Not There")
            Exit Function
        End If
        If GetPlantConfigParamValue("OutFileDir", g_sOutputFileDir) = False Then
            MsgBox("ReadConfiguration Parameter OutFileDir Not There")
            Exit Function
        End If
        If GetPlantConfigParamValue("DateTimeForatString", g_sTimeFormatIndian) = False Then
            MsgBox("ReadConfiguration Parameter DateTimeForatString Not There")
            Exit Function
        End If

        If GetPlantConfigParamValue("DataMissingText", g_sErrorText) = False Then
            MsgBox("ReadConfiguration Parameter DataMissingText Not There")
            Exit Function
        End If
        If GetPlantConfigParamValue("GeneratedBy", g_sGeneratedBy) = False Then
            MsgBox("ReadConfiguration Parameter GeneratedBy Not There")
            Exit Function
        End If
        If GetPlantConfigParamValue("GeneratedTime", g_sGeneratedTime) = False Then
            MsgBox("ReadConfiguration Parameter GeneratedTime Not There")
            Exit Function
        End If

        If GetPlantConfigParamValue("PSpace", g_sPspace) = False Then
            MsgBox("ReadConfiguration Parameter PSpace Not There")
            Exit Function
        End If

        If GetPlantConfigParamValue("LSpace", g_sLSpace) = False Then
            MsgBox("ReadConfiguration Parameter LSpace Not There")
            Exit Function
        End If




        g_oH1Font = New iTextSharp.text.Font(g_oReportFontName, g_fH1FontSize, iTextSharp.text.Font.BOLD, iTextSharp.text.BaseColor.BLACK)
        g_oH2Font = New iTextSharp.text.Font(g_oReportFontName, g_fH2FontSize, iTextSharp.text.Font.BOLD, iTextSharp.text.BaseColor.BLACK)
        g_oHFont = New iTextSharp.text.Font(g_oReportFontName, g_fHFontSize, iTextSharp.text.Font.BOLD, iTextSharp.text.BaseColor.BLACK)

        'Body Font
        g_oBodyFont = New iTextSharp.text.Font(g_oReportFontName, g_fBodyFontSize, iTextSharp.text.Font.NORMAL, iTextSharp.text.BaseColor.BLACK)
        g_oBodyFontLow = New iTextSharp.text.Font(g_oReportFontName, g_fBodyFontSize, iTextSharp.text.Font.BOLD, iTextSharp.text.BaseColor.RED)
        g_oBodyFontHigh = New iTextSharp.text.Font(g_oReportFontName, g_fBodyFontSize, iTextSharp.text.Font.BOLDITALIC, iTextSharp.text.BaseColor.RED)
        g_oBodyHeaderFont = New iTextSharp.text.Font(g_oReportFontName, g_fBodyFontSize, iTextSharp.text.Font.NORMAL, iTextSharp.text.BaseColor.BLACK)

        'Footer Font
        g_oFooterFont = New iTextSharp.text.Font(g_oReportFontName, g_fFooterFontSize, iTextSharp.text.Font.NORMAL, iTextSharp.text.BaseColor.BLACK)




        ReadDatabaseConnection = True

    End Function

    Public Sub LoadReportsIntoListBox(ByRef oReportGrid As DataGridView, ByVal nReportType As Integer)
        oReportGrid.Rows.Clear()
        Dim sQuery As String
        Dim oReader As ODBCDataReader
        Dim nRow As Integer

        Try
            sQuery = "SELECT * FROM TBL_ReportsConfiguration WHERE ReportType=" + nReportType.ToString
            Dim oConnection As New ODBCConnection(g_sConString)
            oConnection.Open()
            Dim oCmd As New odbcCommand(sQuery, oConnection)
            oReader = oCmd.ExecuteReader()
            While oReader.Read()
                nRow = oReportGrid.Rows.Add
                oReportGrid.Rows(nRow).Cells(0).Value = oReader("ID")
                oReportGrid.Rows(nRow).Cells(1).Value = oReader("ReportTitle")
                Try
                    oReportGrid.Rows(nRow).Cells(2).Value = oReader("TimeIntervalInMin")
                Catch ex As Exception
                    oReportGrid.Rows(nRow).Cells(2).Value = "1"
                End Try

            End While
            oReader.Close()
            oConnection.Close()
        Catch ex As Exception
            MsgBox(ex.Message)
            Exit Sub
        End Try
        oReportGrid.ClearSelection()
        oReportGrid.Refresh()
    End Sub

    Public Function fileNameDateStamp()

        fileNameDateStamp = Now.Day.ToString + "_" + Now.Month.ToString() + "_" + Now.Year.ToString + "_" + Now.Hour.ToString + "_" + Now.Minute.ToString + "_" + Now.Second.ToString + "_"

    End Function

    Public Sub ReaderReportConfiguration(ByVal nReportID As Integer)
        g_nReportID = nReportID
        g_nHeaderCount = 2

        Dim sQuery As String
        Dim oReader As ODBCDataReader
        Dim nTemplateID As Integer = 0

        g_bHeader1 = True
        g_bHeader2 = True
        g_bHeader3 = False



        Try
            sQuery = "SELECT * FROM TBL_ReportsConfiguration WHERE ID=" + g_nReportID.ToString
            Dim oConnection As New ODBCConnection(g_sConString)
            oConnection.Open()
            Dim oCmd As New odbcCommand(sQuery, oConnection)
            oReader = oCmd.ExecuteReader()
            If oReader.Read() Then
                nTemplateID = oReader("TemplateID")
                Try
                    g_nReportType = oReader("ReportType")
                Catch ex As Exception
                    g_nReportType = ReportType.DataReport
                End Try

                Try
                    If g_nReportType = ReportType.AlarmReport Then
                        g_nAlmGroupID = oReader("AlmGroupID")
                    Else
                        g_nAlmGroupID = 0
                    End If
                Catch ex As Exception
                    g_nAlmGroupID = 0
                End Try


                Try
                    g_sHeader2 = oReader("ReportTitle")
                    g_sHeader2.Trim()
                Catch ex As Exception
                    g_sHeader2 = "Report Title Not Defined"
                End Try


                Try
                    g_sHeader3 = oReader("ReportHeader")
                    g_sHeader3.Trim()
                Catch ex As Exception
                    g_sHeader3 = ""
                End Try
                If g_sHeader3 <> "" Then
                    g_bHeader3 = True
                    g_nHeaderCount += 1
                End If

                Try
                    g_bGeneratedTime = oReader("GeneratedTime")
                Catch ex As Exception
                    g_bGeneratedTime = False
                End Try
                Try
                    g_bGeneratedBy = oReader("GeneratedBy")
                Catch ex As Exception
                    g_bGeneratedBy = False
                End Try

                Try
                    g_bFRomToDatesPrinted = oReader("FromToDatesPrinted")
                Catch ex As Exception
                    g_bGeneratedBy = False
                End Try

                g_sDataTableName = oReader("DataTablename")

                Try
                    g_nTimeIntervalMin = oReader("TimeIntervalInMin")
                Catch ex As Exception
                    g_nTimeIntervalMin = 1
                End Try
                Try
                    If g_nReportType = ReportType.DataReport And g_nTimeIntervalMin > 1 Then
                        g_nDataAgg = oReader("DataAggregationType")
                    Else
                        g_nDataAgg = DataAgg.Instance
                    End If
                Catch ex As Exception
                    g_nDataAgg = DataAgg.Instance
                End Try

            End If

            oReader.Close()
            oConnection.Close()
        Catch ex As Exception
            MsgBox(ex.Message)
            Exit Sub
        End Try

        ReadReportTemplateConfiguration(nTemplateID)

        ReadReportColumnConfiguration(nReportID)

    End Sub

    Public Sub ReadReportTemplateConfiguration(ByRef nTemplateID As Integer)
        g_oFooterRowList.Clear()
        Try

            Dim sQuery As String
            Dim oReader As ODBCDataReader
            Dim sTemp As String


            sQuery = "SELECT * FROM TBL_Templates WHERE ID=" + nTemplateID.ToString()

            Dim oConnection As New ODBCConnection(g_sConString)
            oConnection.Open()
            Dim oCmd As New odbcCommand(sQuery, oConnection)
            oReader = oCmd.ExecuteReader

            If oReader.Read() Then
                Dim oCol As New ReportColumn
                oCol.m_nID = oReader("ID")
                g_bLandScape = oReader("LandScape")
                g_bIconNeeded = oReader("IsIconNeeded")

                Dim oFooterRow As FooterRow
                oFooterRow = New FooterRow(True, oReader("FooterTableCol1"), oReader("FooterTableCol2"), oReader("FooterTableCol3"))
                g_oFooterRowList.Add(oFooterRow)

                sTemp = oReader("Footer1")
                sTemp = sTemp.Trim()
                If sTemp.Length > 0 Then
                    oFooterRow = New FooterRow(sTemp)
                    g_oFooterRowList.Add(oFooterRow)
                End If
                sTemp = oReader("Footer2")
                sTemp = sTemp.Trim()
                If sTemp.Length > 0 Then
                    oFooterRow = New FooterRow(sTemp)
                    g_oFooterRowList.Add(oFooterRow)
                End If
                sTemp = oReader("Footer3")
                sTemp = sTemp.Trim()
                If sTemp.Length > 0 Then
                    oFooterRow = New FooterRow(sTemp)
                    g_oFooterRowList.Add(oFooterRow)
                End If
                sTemp = oReader("Footer4")
                sTemp = sTemp.Trim()
                If sTemp.Length > 0 Then
                    oFooterRow = New FooterRow(sTemp)
                    g_oFooterRowList.Add(oFooterRow)
                End If



                g_fTopBottomMargin = oReader("TopBottomMargin")
                g_fSideMargin = oReader("SideMargin")
                g_fSideFactor = oReader("SideFactor")

                g_fH1FontSize = oReader("H1FontSize")
                g_fH2FontSize = oReader("H2FontSize")
                g_fHFontSize = oReader("HFontSize")
                g_fBodyFontSize = oReader("BodyFontSize")
                g_fBodyHeaderFontSize = oReader("BodyHeaderFontSize")
                g_fFooterFontSize = oReader("FooterFontSize")
                g_oReportFontName = oReader("FontName")

                g_nHeaderPad = oReader("HeaderPadding")
                g_nBodyHeaderPad = oReader("BodyHeaderPadding")
                g_nBodyPad = oReader("BodyPadding")
                g_nFooterPad = oReader("FooterPadding")

                If g_oReportFontName = Font.FontFamily.COURIER Then
                    g_sReportFontName = BaseFont.COURIER
                ElseIf g_oReportFontName = Font.FontFamily.HELVETICA Then
                    g_sReportFontName = BaseFont.HELVETICA
                Else
                    g_oReportFontName = Font.FontFamily.TIMES_ROMAN
                    g_sReportFontName = BaseFont.TIMES_ROMAN
                End If

                Try
                    g_oReportFontName = Convert.ToInt32(g_sReportFontName)

                Catch ex As Exception

                End Try


                g_oH1Font = New iTextSharp.text.Font(g_oReportFontName, g_fH1FontSize, iTextSharp.text.Font.BOLD, iTextSharp.text.BaseColor.BLACK)
                g_oH2Font = New iTextSharp.text.Font(g_oReportFontName, g_fH2FontSize, iTextSharp.text.Font.BOLD, iTextSharp.text.BaseColor.BLACK)
                g_oHFont = New iTextSharp.text.Font(g_oReportFontName, g_fHFontSize, iTextSharp.text.Font.BOLD, iTextSharp.text.BaseColor.BLACK)

                'Body Font
                g_oBodyFont = New iTextSharp.text.Font(g_oReportFontName, g_fBodyFontSize, iTextSharp.text.Font.NORMAL, iTextSharp.text.BaseColor.BLACK)
                g_oBodyFontLow = New iTextSharp.text.Font(g_oReportFontName, g_fBodyFontSize, iTextSharp.text.Font.BOLD, iTextSharp.text.BaseColor.RED)
                g_oBodyFontHigh = New iTextSharp.text.Font(g_oReportFontName, g_fBodyFontSize, iTextSharp.text.Font.BOLDITALIC, iTextSharp.text.BaseColor.RED)
                g_oBodyHeaderFont = New iTextSharp.text.Font(g_oReportFontName, g_fBodyFontSize, iTextSharp.text.Font.NORMAL, iTextSharp.text.BaseColor.BLACK)

                'Footer Font
                g_oFooterFont = New iTextSharp.text.Font(g_oReportFontName, g_fFooterFontSize, iTextSharp.text.Font.NORMAL, iTextSharp.text.BaseColor.BLACK)

            End If
            oReader.Close()
            oConnection.Close()
        Catch ex As Exception

        End Try
    End Sub

    Public Sub ReadReportColumnConfiguration(ByRef nReportID As Integer)
        g_oColList.Clear()
        Try
            Dim sQuery As String
            Dim oReader As ODBCDataReader

            If g_nReportType = ReportType.DataReport Then
                sQuery = "SELECT * FROM TBL_ReportColumns WHERE ReportID=" + nReportID.ToString() + " ORDER BY ColSeq"
            ElseIf g_nReportType = ReportType.EventReport Then
                sQuery = "SELECT * FROM TBL_ReportColumns WHERE ReportID=-1 ORDER BY ColSeq"
            ElseIf g_nReportType = ReportType.AlarmReport Then
                sQuery = "SELECT * FROM TBL_ReportColumns WHERE ReportID=-2 ORDER BY ColSeq"
            Else
                Exit Sub
            End If
            Dim oConnection As New ODBCConnection(g_sConString)
            oConnection.Open()
            Dim oCmd As New odbcCommand(sQuery, oConnection)
            oReader = oCmd.ExecuteReader

            While oReader.Read()
                Dim oCol As New ReportColumn
                oCol.m_nID = oReader("ID")

                oCol.m_nColType = oReader("ColType")

                If oCol.m_nColType = ColType.DateTime Then
                    oCol.m_sColType = "Date Time"
                ElseIf oCol.m_nColType = ColType.Temperature Then
                    oCol.m_sColType = "Temperature"
                ElseIf oCol.m_nColType = ColType.Humidity Then
                    oCol.m_sColType = "RH"
                ElseIf oCol.m_nColType = ColType.DP Then
                    oCol.m_sColType = "Diffrential Pressure"
                Else
                    oCol.m_sColType = "Other"
                End If
                oCol.m_sColFormat = oReader("ColFormat")
                oCol.m_sColTitle = oReader("ColHeader")
                oCol.m_sColWidth = oReader("ColWidth")
                oCol.m_nColJust = oReader("ColJust")
                oCol.m_sColumnNameinTable = oReader("ColNameInDB")
                oCol.m_bLowCheck = oReader("LowCheck")
                If oCol.m_bLowCheck Then
                    oCol.m_fLow = oReader("LowCheckValue")
                Else
                    oCol.m_fLow = 0
                End If

                oCol.m_bHighCheck = oReader("HighCheck")
                If oCol.m_bHighCheck Then
                    oCol.m_fHigh = oReader("HighCheckValue")
                Else
                    oCol.m_fHigh = 0
                End If

                If oCol.m_nColType = ColType.DateTime Or oCol.m_nColType = ColType.Other Then
                    oCol.m_bLowCheck = False
                    oCol.m_bHighCheck = False
                End If




                g_oColList.Add(oCol)
            End While




            oReader.Close()
            oConnection.Close()
        Catch ex As Exception

        End Try
    End Sub



End Module
